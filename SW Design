① 계획(planning) 단계

• 문제를 정의한 후 프로젝트 영역을 결정한다.

• 작업 분할 구조도를 이용하여 세부 작업을 결정한다.

   * 작업 분활 구조도 (WBS: Work Breakdown Structure)

• CPM(Critical Path Method)을 이용해 작업 순서를 결정한다.

• 간트 차트(Gantt chart)를 이용해 일정표를 작성한다.

• 기능 점수(FP: Function Point) 등을 이용해 프로젝트에 소요되는 비용을 산정한다.

• 계획 단계의 최종 산출물인 '개발 계획서'를 작성한다.

​

② 요구 분석(requirement analysis) 단계

• 기존 시스템을 분석하고, 인터뷰 등을 통해 사용자의 요구 사항을 수집한다.

• 사용자가 요구하는 기능적 요구 사항과 비기능적 요구 사항을 파악하다.

• 각 방법론에 따른 표기법을 이용해 정리된 요구 사항을 표현한다.

• 요구 분석 단계의 최종 산출물인 '요구 분석 명세서'를 작성한다.

​

③ 설계(design) 단계

상위 설계 : 전체적인 시스템 구성 설계

• 개발하려는 소프트웨어의 전체 구조를 볼 수 있는 아키텍처를 설계한다.

하위 설계 : 각 모듈(컴포넌트, 자료구조, 알고리즘)의 세부 내용을 설계

• 모듈 간의 결합도와 모듈 내의 응집력을 고려해 각 모듈의 세부 내용을 설계한다.

④ 구현(implementation) 단계

• 구현은 코딩을 하는 단계이다. 

• 코딩을 할 때는 가능한 표준 코딩 스타일을 지키는 것이 좋다.

​

⑤ 테스트(test) 단계

• 개발자 또는 사용자 시각에 따른 분류

• 사용되는 목적에 따른 분류

• 품질 특성에 따른 분류

• 소프트웨어 개발 단계에 따른 분류

​

⑥ 유지보수(maintenance) 단계

소프트웨어 유지보수는 사는 집에 불편한 부분이 발견되거나 낡으면

 계속 고치면서 살아가는 것과 유사하다. 소프트웨어도 사용하다 보면 추가 요구 사항,

 수정 사항 등이 많이 발생한다. 유지보수 단계는 사용 중인 소프트웨어를 문제없이

 잘 유지하고, 문제가 있는 곳은 보수하면서 사용하는 단계이다. 
